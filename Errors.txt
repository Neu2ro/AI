Formulate and Implement the State Space representation for Water Jug / Wumpus World /Towers of Hanoi problem using PROLOG

Tower of Hanoi

move(1, X, Y, _) :-
    write('Move top disk from '), write(X), write(' to '), write(Y), nl.
move(N, X, Y, Z) :-
    N > 1,
    M is N - 1,
    move(M, X, Z, Y),
    move(1, X, Y, _),
    move(M, Z, Y, X).
Execute with:
move(3, source, target, auxiliary).


Water Jug

fill(x,y).
fill(2,0):- nl,
            write('Goal State Reached').
fill(X,Y):- X=0,Y=<1,
            nl,
            write('Fill 4-Gallon jug:(4,'),
            write(Y),
            write(')'),
            fill(4,Y).
fill(X,Y):- Y=0,X=3,
            nl,
            write('Fill 3-Gallon jug:('),
            write(X),
            write(',3)'),
            fill(X,3).
fill(X,Y):- X+Y>=4,Y=3,X=3,
            Y1 is Y-(4-X),
            nl,
            write('Pour Water from 3-gallon jug to 4-gallon jug until it is full:(4,'),
            write(Y1),
            write(')'),
            fill(4,Y1).
fill(X,Y):- X+Y>=3,Y=<1,X=4,
            X1 is X-(3-Y),
            nl,
            write('Pour Water from 4-gallon jug to 3-gallon jug until it is full:('),
            write(X1),
            write(',3)'),
            fill(X1,3).
fill(X,Y):- X+Y=<4,X=0,Y>1,
            X1 is X+Y,
            nl,
            write('Pour all Water from 3-gallon jug to 4-gallon jug:('),
            write(X1),
            write(',0)'),
            fill(X1,0).
fill(X,Y):- X+Y<3,Y=0,
            Y1 is X+Y,
            nl,
            write('Pour all Water from 4-gallon jug to 3-gallon jug:(0,'),
            write(Y1),
            write(')'),
            fill(0,Y1).
fill(X,Y):- Y=2,X=<4,
            nl,
            write('EmptY 4-gallon jug on ground:(0,'),
            write(Y),
            write(')'),
            fill(0,Y).
fill(X,Y):- Y=<3,X>=1,
            nl,
            write('EmptY 3-gallon jug on ground:('),
            write(X),
            write(',0)'),
            fill(X,0).
fill(X,Y):- X>4,Y<3,
            write('4-gallon jug overflow:'),
            nl.
fill(X,Y):- X<4,Y>3,
            write('3-gallon jug overflow:'),
            nl.
fill(X,Y):- X>4,Y>3,
            write('4-gallon jug and 3-gallon jug overflow:'),
            nl.


Wumpus World 

% NOTE:
%	- To run the program, execute the following query:
%				start; printResult.
%
%	- To see the status of each move the agent makes,
%	  uncomment the first line of the first occurrence of
%	  the predicate start_searching.
%
:- dynamic([
  world_size/1,	% Size of the board as [X, Y]
  position/2,		% position as (A, [X, Y]) implying location of A is [X, Y]
  wumpus/1,		% Possible position of Wumpus to be inferred from smell
  noPit/1,		% noPit([X, Y]) means agent is sure there is no pit on [X, Y] cell, inferred from no breeze on adjacent cell(s)
  noWumpus/1,		% noWumpus([X, Y]) means agent is sure there is no Wumpus on [X, Y] cell, inferred from no smell on adjacent cell(s)
  maybeVisitLater/2,	% if no adjacent cell to go to, add the current cell as a probable point to visit later and backtrack
  goldPath/1		% agent stores each path from [1, 1] cell to the Gold retrieved
]).
%% The starting point for execution
start:-
  % make sure to clear any previous facts stored
  retractall(wumpus(_)),
  retractall(noPit(_)),
  retractall(noWumpus(_)),
  retractall(maybeVisitLater(_,_)),
  retractall(goldPath(_)),
  % initializations
  init_board,
  init_agent,
  init_wumpus,
  % agent starts searching from [1, 1] cell
  start_searching([1, 1], []),
  % if any paths stored as possible to visit later, do so
  maybeVisitLater(PausedCell, LeadingPath),
  retract(maybeVisitLater(PausedCell, _)),
  start_searching(PausedCell, LeadingPath).
%% INITIALIZING THE BOARD WITH PITS & GOLD
init_board:-
  retractall(world_size(_)),
  assert(world_size([5, 5])),		% dimensions of the board
  retractall(position(_, _)),
  assert(position(gold, [3, 3])),		% position of gold
  % positions of pits
  assert(position(pit, [3, 1])),
  assert(position(pit, [5, 1])),
  assert(position(pit, [3, 3])),
  assert(position(pit, [4, 4])),
  assert(position(pit, [2, 5])),
  assert(noPit([1, 1])).		% There cannot be pit at [1, 1] where agent starts.
%% INITIALIZING THE AGENT IN THE BOARD
init_agent:-
  assert(position(agent, [1, 1])).
%% INITIALIZING THE WUMPUS IN THE BOARD
init_wumpus:-
  assert(position(wumpus, [1, 3])),
  assert(noWumpus([1, 1])).
%% DEFINING THE PERCEPTORS
% Helper predicate to check if cell position given is valid in the board.
valid_position([X, Y]):- X>0, Y>0, world_size([P, Q]), X@=<P, Y@=<Q.
% Generate adjacent positions of a given position.
adjacent([X, Y], Z):- Left is X-1, valid_position([Left, Y]), Z=[Left, Y].
adjacent([X, Y], Z):- Right is X+1, valid_position([Right, Y]), Z=[Right, Y].
adjacent([X, Y], Z):- Above is Y+1, valid_position([X, Above]), Z=[X, Above].
adjacent([X, Y], Z):- Below is Y-1, valid_position([X, Below]), Z=[X, Below].
% A position is smelly if a cell with Wumpus is adjacent to it. There has to be at least one wumpus first.
is_smelly([X, Y]):-
  position(wumpus, Z), \+ noWumpus(Z),
  adjacent([X, Y], Z).
% A position is breezy if a cell adjacent to it contains pit.
is_breezy([X, Y]):- adjacent([X, Y], Z), position(pit, Z).
% A position is glittery if the cell contains gold.
is_glittery([X, Y]):- position(gold, Z), Z==[X, Y].
%% TAKING THE ACTIONS
% Utility predicate checking if two different matches can be found to ascertain Wumpus' location.
moreThanOneWumpus:-
  wumpus(X), wumpus(Y), X\=Y.
% Confirming there are no more than one possible recordings of Wumpus based on smell perceived,
% then killing Wumpus from a cell that aligns in a straight line with the Wumpus' cell.
killWumpusIfPossible(AgentCell):-
  wumpus([Xw, Yw]), \+ moreThanOneWumpus,	% ascertain Wumpus' cell
  AgentCell=[Xa, Ya],
  (Xw==Xa; Yw==Ya),			% check Agent is in a cell that's in a straight line as Wumpus' cell
  assert(noWumpus([Xw, Yw])),		% record that Wumpus is not in the board anymore as it is considered killed
  format('~nAgent confirmed Wumpus cell to be ~w and shot an arrow from cell ~w.~nThe WUMPUS has been killed!~n', [[Xw, Yw], AgentCell]),
  retractall(wumpus(_)).
%% Searching takes place as a series of checkings. If and when the first predicate fails,
%  or completes, the second predicate of the same name is tried.
% Check if the cell contains gold
start_searching(Cell, LeadingPath):-
 printStatus(Cell, LeadingPath),		% remove comment to print status at each move
  is_glittery(Cell),
  append(LeadingPath, [Cell], CurrentPath),
  % record the gold path if it's not already done
  \+ goldPath(CurrentPath), assert(goldPath(CurrentPath)).
% Check if the agent can perceive breeze in the cell
start_searching(Cell, _):-
  is_breezy(Cell).
  % format('BREEZE detected!~n').
% Check if the agent cannot perceive breeze.
% This is important as it gives CERTAINTY that adjacent cells do not have pit.
start_searching(Cell, _):-
  \+ is_breezy(Cell),
  adjacent(Cell, X),
  \+ noPit(X), assert(noPit(X)).
% Check if the agent can perceive smell at this cell.
% If smelly, record that adjacent cells may have Wumpus.
start_searching(Cell, _):-
  is_smelly(Cell),
  adjacent(Cell, X),
  \+ noWumpus(X), assert(wumpus(X)).
% If the cell doesn't have smell, record that the adjacent cells certainly do NOT have Wumpus.
start_searching(Cell, _):-
  \+ is_smelly(Cell),
  adjacent(Cell, X),
  \+ noWumpus(X), assert(noWumpus(X)),
  wumpus(Y), X==Y, retract(wumpus(Y)).
% Otherwise, try to see and do if it is feasible to kill Wumpus from this cell,
% then find neighboring cells that are safe and visit recursively.
start_searching(CurrentCell, LeadingPath):-
  (killWumpusIfPossible(CurrentCell); format('')),	% Kill Wumpus if possible, else do nothing.
  append(LeadingPath, [CurrentCell], CurrentPath),
  \+ is_glittery(CurrentCell),	% We don't wanna explore further if we reach the gold.
  % get adjacent cells
  adjacent(CurrentCell, X), \+ member(X, LeadingPath),
  % if the adjacent cells are not safe, marked as maybe Wumpus or maybe Pit,
  % put these to maybeVisitLater, so if inferred later to be safe, we will visit later.
  (( noWumpus(X), noPit(X)) -> write('');
    (\+ maybeVisitLater(CurrentCell, _) -> assert(maybeVisitLater(CurrentCell, LeadingPath)); write(''))
  ),
  % Of those that the agent knows to be safe (no Wumpus/pit), start searching from them.
  noWumpus(X), noPit(X),
  start_searching(X, CurrentPath).
%% OUTPUTTING THE STATUS & RESULTS
% The first result type is NO gold paths found and print result accordingly.
printResult:-
  \+ goldPath(_), write("==> Actually, no possible paths found! :(").
% The second result type is gold paths found, print the paths.
printResult:-
  goldPath(_), !, format('The following paths to the Gold are found: ~n'),
  forall(goldPath(X), writeln(X)).
% Print the status of any given cell from during the search.
printStatus(Cell, LeadingPath):-
  format('~n--------------- STATUS ---------------~nCurrently in ~w~nLeading path: ~w~n', [Cell, LeadingPath]),
  write('WUMPUS: '),
  forall(wumpus(X), writeln(X)),nl,
  write('NO PIT: '),
  forall(noPit(Y), writeln(Y)),
  write('NO WUMPUS: '),
  forall(noWumpus(Z), writeln(Z)),
  write('MAYBE VISIT LATER: '),
  forall(maybeVisitLater(M, _), writeln(M)),
  format('~n-----------------------~n~n').



Implement any Uninformed Searching Technique.(BFS/DFS)

BFS:
class Graph:
   def __init__(self):
       self.graph = {}
   def add_edge(self, u, v):
       if u not in self.graph:
           self.graph[u] = []
       self.graph[u].append(v)
   def bfs(self, start, goal):
       visited = set()
       queue = [(start, 0)]
       while queue:
           current_node, level = queue.pop(0)
           print(f"({current_node}, {level}), ", end= " ")
           if current_node == goal:
               print(f"\nGoal node {goal} found at level  {level}")
               return True
           if current_node not in visited:
               visited.add(current_node)
               for neighbour in self.graph.get(current_node, []):
                   if neighbour not in visited:
                       queue.append((neighbour, level + 1))
       print(f"\n Goal node {goal} not found in the graph")
       return False
g = Graph()
n = int(input("Enter the number of edges: "))
for i in range(n):
   u, v = map(int, input("Enter edge (u, v): ").split())
   g.add_edge(u, v)
start = int(input("Enter the starting vertex: "))
goal = int(input("Enter the goal vertex: "))
print("BFS Traversal: ", end=" ")
g.bfs(start, goal)



DFS:
class TreeNode:
   def __init__(self, val=None, children=None):
       self.val = val
       self.children = children if children is not None else []
def dfs_optimal_path(root, source, target, path, optimal_path):
   if not root:
       return
   path.append(root.val)
   print(path)
   if root.val == target:
       optimal_path.clear()
       optimal_path.extend(path)
       path_cost = len(optimal_path) - 1
       print("Optimal path from", source, "to", target, ":", optimal_path, "\nOptimal Path Cost:", path_cost)
       exit()
   # Recursively search each child of the node
   for child in root.children:
       if child.val not in path:
           dfs_optimal_path(child, source, target, path, optimal_path)
   path.pop()
root = TreeNode(1, [                #node 1 has childrens 2, 3, 4
       TreeNode(2, [               #node 2 has childrens 5, 6
           TreeNode(5, [           #node 4 has childrens 7, 8
               TreeNode(9),        #node 5 has childrens 9, 10
               TreeNode(10),       #node 7 has childrens 11, 12
           ]),
           TreeNode(6),
       ]),
       TreeNode(3),
       TreeNode(4, [
           TreeNode(7, [
               TreeNode(11),
               TreeNode(12),
           ]),
           TreeNode(8),
       ]),
   ])
source = 'A'
target = 'J'
path = []
optimal_path = []
path_cost = 0
dfs_optimal_path(root, source, target, path, optimal_path)
print("No path from", source, "to", target, "found in the tree")



Implement any Informed Searching Technique.(Astar)

sld = {
   'S': 10,
   'A': 12,
   'B': 14,
   'C': 11,
   'D': 4,
   'E': 6,
   'F': 8,
   'G': 1,
   'H': 2,
   'I': 3,
   'Ht': 4,
}
coords = {
   'S': 0,
   'A': 2,
   'B': 3,
   'C': 9,
   'D': 5,
   'G': 3,
   'H': 5,
   'E': 5,
   'F': 16,
   'I': 6,
   'Ht': 8
}
graph = {
   'S': ['A', 'B'],
   'A': ['C', 'D'],
   'D': ['G', 'H'],
   'B': ['E', 'F'],
   'E': ['I', 'Ht'],
   'C': [],
   'F': [],
   'G': [],
   'H': [],
   'I': [],
   'Ht': []
}
def getEuclideanDistance(node):
   return coords[node]
def getPathCost(path):
   nodes = path.split(" --> ")
   cost = 0
   for node in nodes:
       cost += getEuclideanDistance(node)
   return cost
openList = [['S', getPathCost('S')]]
solutions = []
flag = 0
count = 0
while True:
   if flag == 1 or len(openList) == 0:
       break
   path = openList[0][0]
   count += 1
   print('\nIteration: ', count)
   end = path.split(' --> ')[-1]
   while end == 'Ht':
       openList.remove([path, getPathCost(path)])
       solutions.append([path, getPathCost(path)])
       if len(openList) == 0:
           flag = 1
           break
       path = openList[0][0]
       end = path.split(' --> ')[-1]
   if len(openList) != 0:
       for n in graph[end]:
           newPath = path + ' --> ' + n
           openList.append([newPath, getPathCost(newPath)])
       openList.remove([path, getPathCost(path)])
       openList.sort(key=lambda x : x[1])
       for x in openList:
           print('{:<40s} Cost: {:f}'.format(x[0], x[1]))
print('\nPossible Solutions are: ')
for sol in solutions:
   print(sol[0])
print('\nOptimal Solution is ', solutions[0][0])
print('Optimal Cost is ', solutions[0][1])
print()



Implement a Game playing algorithm(minimax algo)

import math
def minimax(curDepth, nodeIndex, maxTurn, scores, targetDepth):
   if curDepth == targetDepth:
       return scores[nodeIndex]
   if maxTurn:
       return max(minimax(curDepth + 1, nodeIndex * 2, False, scores, targetDepth), minimax(curDepth + 1, nodeIndex * 2 + 1, False, scores, targetDepth))
   else:
       return min(minimax(curDepth + 1, nodeIndex * 2, True, scores, targetDepth), minimax(curDepth + 1, nodeIndex * 2 + 1, True, scores, targetDepth))
def minimum():
   op = olist
   for i in op:
       if len(graph[i]) != 0:
           for j in graph[i]:
               if util[j] < 10:
                   olist.append(j)
               else:
                   clist.append(j)
       olist.remove(i)
       clist.append(i)
def maximum():
   op = olist.copy()
   for i in op:
       path = []
       all_paths = []
       winutil = 0
       if len(graph[i]) != 0:
           for j in graph[i]:
               if util[j] > winutil:
                   if i == 6:
                       path.append(1)
                       path.append(3)
                       path.append(i)
                       path.append(j)
                       all_paths.append(path)
                   elif i == 8:
                       path.append(1)
                       path.append(4)
                       path.append(i)
                       path.append(j)
                       all_paths.append(path)
                   else:
                       path.append(i)
                       path.append(j)
                       all_paths.append(path)
                       print(f"The optimum path is {path}")
                       print("All possible paths are: ")
                       clist.append(j)
                       if len(olist) != 0:
                           continue
                       else:
                           break
               else:
                   olist.append(j)
       olist.remove(i)
       clist.append(i)
   print(all_paths)
def mm():
   olist.append(1)
   c = 0
   while len(olist) != 0:
       if c == 1:
           minimum()
           c = 0
       else:
           maximum()
           c = 1
graph = {
   1: [2, 3, 4],
   2: [5, 6],
   3: [7, 8],
   4: [9, 10],
   5: [],
   6: [],
   7: [],
   8: [],
   9: [],
   10: [],
}
util = {
   1: 8,
   2: 4,
   3: 0,
   4: 8,
   5: 4,
   6: 7,
   7: 1,
   8: 0,
   9: 13,
   10: 8,
}
scores = [8, 4, 0, 8, 4, 7, 1, 0, 13, 8]
treeDepth = 3
olist = []
clist = []
path = []
mm()
print("The optimal value is =", end=" ")
print(minimax(0, 0, True, scores, treeDepth))



Implement an Adversarial Searching Algorithm

dict = {'00': 'A', '10': 'B', '20': 'D', '21': 'E', '11': 'C', '22': 'F', '23': 'G'}
MAX, MIN = 1000, -1000
def minimax(depth, nodeIndex, maximizingPlayer, values, alpha, beta):
   count = 0
   if depth == 3:
       return values[nodeIndex]
   if maximizingPlayer:
       best = MIN
       for i in range(0, 2):
           if (dict.get(str(depth) + str(nodeIndex)) != 'F'):
               print("Node : ", dict.get(str(depth) + str(nodeIndex)), " Values -- alpha : ", alpha, "beta : ", beta)
           if (dict.get(str(depth) + str(nodeIndex)) == 'F' and count == 0):
               print('Node :  F  Values -- alpha :  3 beta :  0')
               print('Node :  F  Values -- alpha :  3 beta :  1')
               count = count + 1
           val = minimax(depth + 1, nodeIndex * 2 + i,
                         False, values, alpha, beta)
           best = max(best, val)
           alpha = max(alpha, best)
           if (dict.get(str(depth) + str(nodeIndex)) != 'F'):
               print("Node : ", dict.get(str(depth) + str(nodeIndex)), " Values -- alpha : ", alpha, "beta : ", beta)
           # Alpha Beta Pruning
           if beta <= alpha:
               break
       return best
   else:
       best = MAX
       for i in range(0, 2):
           print("Node : ", dict.get(str(depth) + str(nodeIndex)), " Values -- alpha : ", alpha, "beta : ", beta)
           val = minimax(depth + 1, nodeIndex * 2 + i,
                         True, values, alpha, beta)
           best = min(best, val)
           beta = min(beta, best)
           print("Node : ", dict.get(str(depth) + str(nodeIndex)), " Values -- alpha : ", alpha, "beta : ", beta)
           # Alpha Beta Pruning
           if beta <= alpha:
               break
       return best
# Driver Code
if __name__ == "__main__":
   values = [3, 5, 6, 9, 1, 2, 0, -1]
   graph = {
       'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F', 'G'], 'D': [3, 5], 'E': [6, 9], 'F': [1, 2], 'G': [0, -1]
   }
   print("The optimal value is :", minimax(0, 0, True, values, MIN, MAX))



Implementation for Bayes Belief Network

from matplotlib import pyplot as plt
import networkx as nx
import numpy as np
# Building the graph
G = nx.DiGraph()
nodes = np.arange(0, 5).tolist()
G.add_nodes_from(nodes)
G.add_edges_from([(0, 2), (1, 2), (2, 3), (2, 4)])
pos = {
   0: (5, 10),
   1: (10, 10),
   2: (7.5, 7.5),
   3: (5, 5),
   4: (10, 5)
}
labels = {
   0: "Bulgary",
   1: "Earthquake",
   2: "Alarm",
   3: "John Calls",
   4: "Marry Calls",
}
nx.draw_networkx(G, pos = pos, labels = labels, arrows = True, node_shape = "s", node_color = "white")
plt.title("DAG")
plt.show()
#Solution for the problem
prob_b = float(input("Enter probability of Burglary = "))
prob_e = float(input("Enter probability of Earthquake = "))
prob_a_BtEt = float(input("Enter probability of Alarm if Buglary and Earthquake = "))
prob_a_BtEf = float(input("Enter probability of Alarm if Buglary and not Earthquake = "))
prob_a_BfEt = float(input("Enter probability of Alarm if not Buglary and Earthquake = "))
prob_a_BfEf = float(input("Enter probability of Alarm if not Buglary and not Earthquake = "))
prob_j_At = float(input("Enter probability of John calls if Alarm rings = "))
prob_j_Af = float(input("Enter probability of John calls if Alarm does not rings = "))
prob_m_At = float(input("Enter probability of Marry calls if Alarm rings = "))
prob_m_Af = float(input("Enter probability of Marry calls if Alarm does not rings = "))
ans1 = prob_j_At * prob_m_At * prob_a_BfEf * (1 - prob_b) * (1 - prob_e)
print("Probability that Alarm is sounded but neither Burglary nor Earthquake occurs \nand both John and Marry calls = ", ans1)
prob_At = prob_a_BtEt * prob_b * prob_e + prob_a_BtEf * prob_b * (1 - prob_e) + prob_a_BfEt * (1 - prob_b) * prob_e + prob_a_BfEf * (1 - prob_b) * (1 - prob_e)
print("Probability that Alarm is sounded = ", prob_At)
prob_Af = (1 - prob_a_BtEt) * prob_b * prob_e + (1 - prob_a_BtEf) * prob_b * (1 - prob_e) + (1 - prob_a_BfEt) * (1 - prob_b) * prob_e + (1 - prob_a_BfEf) * (1 - prob_b) * (1 - prob_e)
print("Probability that Alarm is not sounded = ", prob_Af)
ans2 = (prob_j_At * prob_At) + (prob_j_Af * prob_Af)
print("Probability that John calls = ", ans2)
ans3 = (prob_m_At * prob_At) + (prob_m_Af * prob_Af)
print("Probability that Marry calls = ", ans3)

